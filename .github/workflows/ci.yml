name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.6'

jobs:
  # 코드 품질 검사
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Get changed apps
        id: changed-apps
        run: |
          # 변경된 앱들 감지
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR의 경우 base와 비교
            CHANGED_APPS=$(turbo run build --filter=...[origin/${{ github.base_ref }}] --dry-run=json | jq -r '.tasks[] | select(.task == "build") | .package' | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            # Push의 경우 이전 커밋과 비교
            CHANGED_APPS=$(turbo run build --filter=...[HEAD~1] --dry-run=json | jq -r '.tasks[] | select(.task == "build") | .package' | sort -u | tr '\n' ',' | sed 's/,$//')
          fi
          
          if [ -z "$CHANGED_APPS" ]; then
            echo "No apps changed"
            echo "changed_apps=" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed apps: $CHANGED_APPS"
            echo "changed_apps=$CHANGED_APPS" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Run linting (changed apps only)
        if: steps.changed-apps.outputs.has_changes == 'true'
        run: |
          if [ -n "${{ steps.changed-apps.outputs.changed_apps }}" ]; then
            echo "Running lint for: ${{ steps.changed-apps.outputs.changed_apps }}"
            turbo run lint --filter="${{ steps.changed-apps.outputs.changed_apps }}"
          else
            echo "No apps to lint"
          fi
        
      - name: Run type checking (changed apps only)
        if: steps.changed-apps.outputs.has_changes == 'true'
        run: |
          if [ -n "${{ steps.changed-apps.outputs.changed_apps }}" ]; then
            echo "Running type check for: ${{ steps.changed-apps.outputs.changed_apps }}"
            turbo run check-types --filter="${{ steps.changed-apps.outputs.changed_apps }}"
          else
            echo "No apps to type check"
          fi
        
      - name: Run formatting check
        run: pnpm format --check

  # 빌드 테스트
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Get changed apps
        id: changed-apps
        run: |
          # 변경된 앱들 감지
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR의 경우 base와 비교
            CHANGED_APPS=$(turbo run build --filter=...[origin/${{ github.base_ref }}] --dry-run=json | jq -r '.tasks[] | select(.task == "build") | .package' | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            # Push의 경우 이전 커밋과 비교
            CHANGED_APPS=$(turbo run build --filter=...[HEAD~1] --dry-run=json | jq -r '.tasks[] | select(.task == "build") | .package' | sort -u | tr '\n' ',' | sed 's/,$//')
          fi
          
          if [ -z "$CHANGED_APPS" ]; then
            echo "No apps changed"
            echo "changed_apps=" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed apps: $CHANGED_APPS"
            echo "changed_apps=$CHANGED_APPS" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        
      - name: Build changed applications
        if: steps.changed-apps.outputs.has_changes == 'true'
        run: |
          if [ -n "${{ steps.changed-apps.outputs.changed_apps }}" ]; then
            echo "Building: ${{ steps.changed-apps.outputs.changed_apps }}"
            turbo run build --filter="${{ steps.changed-apps.outputs.changed_apps }}"
          else
            echo "No apps to build"
          fi
        env:
          NODE_ENV: production
          
      - name: Build all applications (if no changes detected)
        if: steps.changed-apps.outputs.has_changes == 'false'
        run: pnpm build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/.next/
            packages/*/dist/

  # 보안 검사
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 